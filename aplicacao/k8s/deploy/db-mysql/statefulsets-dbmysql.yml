apiVersion: v1
kind: Service
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  ports:
  - port: 3306
    name: mysql
  clusterIP: None
  selector:
    app: mysql
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql 
  serviceName: "mysql"
  replicas: 1
  minReadySeconds: 10 # depois de 10 segundos o banco vai esta ok!
  template:
    metadata:
      labels:
        app: mysql 
    spec:
      terminationGracePeriodSeconds: 10 # aguardando 10 segundos para o pod ser removido, quando der o comando [kubectl delete pod db-mysql ], após este comando o kuberentes vai aguardar 10 segundos para que as informações sejam salvas corretamente
      containers:
      - name: mysql
        image: mysql:8
        ports:
        - containerPort: 3306
        envFrom: 
            - configMapRef: # referenciando o configmap do mysql
                name: configmap-db
            - secretRef:
               name: secret-db # referenciado a secret senhas do mysql
               
        volumeMounts: # Definindo onde o banco de dados gravará os dados dentro do container
        - name: mysql-storage
          mountPath: /var/lib/mysql

      volumes: # conectando o PersistentVolumeClaim ao banco de dados
        - name: mysql-storage
          persistentVolumeClaim: 
            claimName: mysql-pvc # especificando o nome, utiliznado, atrelando ao pod o PersistentVolumeClaim
   
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce # ou seja, pode ler e escrever um pod por vez
  resources:
    requests:
      storage: 8Gi
  storageClassName: csi-hostpath-sc
  